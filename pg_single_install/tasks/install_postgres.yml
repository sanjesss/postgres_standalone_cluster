---
- name: install Postgres rpm's with YUM
  package:
    name: "{{ item }}"
    state: present
  loop:
    - "{{ PG_LIBS_URL }}"
    - "{{ PG_CLIENT_URL }}"
    - "{{ PG_SERVER_URL }}"
    - "{{ PG_CONTRIB_URL }}"

- name: Create dir for PostgreSQL
  file:
   path: "{{ item }}"
   owner: postgres
   group: postgres
   state: directory
   mode: '0770'
  loop:
    - /data/
    - /data/pgsql/
    - /data/archive/
    - /data/log/

- name: Chown PostgreSQL directory
  file:
     path: "{{ item }}"
     owner: postgres
     group: postgres
     recurse: yes
  loop:
    - /usr/pgsql-{{ PG_VERSION_NUMBER }}
    - /data/

- name: Confrim destroy cluster
  pause:
    prompt: "This command will destroy the cluster if it exists. Are you sure? (yes/no)"
  register: confirm_delete
  when: flush

- name: Stop postgresql service if exist
  systemd:
    name: postgresql
    state: stopped
  when: confirm_delete.user_input | bool

- name: Delete files old cluster if exist
  command: rm -rf /data/pgsql/*
  when: confirm_delete.user_input | bool
  
# - name: Get running processes postmaster
#   shell: "ps -ef | grep -v grep | grep -w \"/usr/pgsql-{{ PG_VERSION_NUMBER }}/bin/postgres\" | awk '{print $2}'"
#   register: running_processes

# - name: Kill running processes postmaster
#   shell: "kill {{ item }}"
#   with_items: "{{ running_processes.stdout_lines }}"

# - name: Waiting until all running processes postmaster are killed
#   wait_for:
#     path: "/proc/{{ item }}/status"
#     state: absent
#   with_items: "{{ running_processes.stdout_lines }}"

- block:

    - name: Database initialization
      command: /usr/pgsql-{{ PG_VERSION_NUMBER }}/bin/initdb -k -D /data/pgsql
      become: true
      become_user: postgres

    - name: Remove old postgresql.conf
      file:
        path: /data/pgsql/postgresql.conf
        state: absent

    - name: Construct postgresql.conf
      template:
        src: templates/postgresql.j2
        dest: /data/pgsql/postgresql.conf
        mode: '0700'
        owner: postgres
        group: postgres

    - name: Remove old pg_hba.conf
      file:
        path: /data/pgsql/pg_hba.conf
        state: absent

    - name: Create and filling new pg_hba.conf
      lineinfile:
        dest: /data/pgsql/pg_hba.conf
        create: yes
        line: "{{ item  }}"
        owner: postgres
        group: postgres
        mode: '0700'
      loop:
        - local all all trust
        - host all all 127.0.0.1/32 scram-sha-256
        - host all all ::1/128 scram-sha-256
        - host all all localhost scram-sha-256
        - host all all 0.0.0.0/0 scram-sha-256

    - name: Start pg_cluster
      command: /usr/pgsql-{{ PG_VERSION_NUMBER }}/bin/pg_ctl -D /data/pgsql start
      become: true
      become_user: postgres

    # - name: Create user for replication
    #   command: psql -U postgres -d postgres -p {{ PG_PORT }} -q -c "CREATE USER {{ PG_REPL_USERNAME }} REPLICATION LOGIN PASSWORD '{{ PG_REPL_PASSWORD }}';"
    #   become: true
    #   become_user: postgres 

    - name: Create user for replication
      postgresql_query:
        db: postgres
        query: CREATE USER {{ PG_REPL_USERNAME }} REPLICATION LOGIN PASSWORD '{{ PG_REPL_PASSWORD }}'

    # - name: Create replication slot
    #   command: psql -U postgres -d postgres -p {{ PG_PORT }} -q -c "SELECT pg_create_physical_replication_slot('{{ PG_REPL_SLOT_NAME }}');"
    #   become: true
    #   become_user: postgres 

    - name: Create slot for replication
      postgresql_query:
        db: postgres
        query: SELECT pg_create_physical_replication_slot('{{ PG_REPL_SLOT_NAME }}')

    - name: Create and filling new pg_hba.conf
      lineinfile:
        dest: /data/pgsql/pg_hba.conf
        line: "{{ item  }}"
        owner: postgres
        group: postgres
        mode: '0700'
      loop:
        - local replication {{ PG_REPL_USERNAME }} trust
        - host replication {{ PG_REPL_USERNAME }} samenet trust

    # - name: Add password for postgres user
    #   command: psql -c "ALTER USER postgres PASSWORD '{{ PG_POSTGRES_PASS }}';"
    #   become: true
    #   become_user: postgres

    - name: Add password for postgres user
      postgresql_query:
        db: postgres
        query: ALTER USER postgres PASSWORD '{{ PG_POSTGRES_PASS }}'

    # - name: Create extension pg_stat_statements
    #   command: psql -c "CREATE EXTENSION pg_stat_statements;"
    #   become: true
    #   become_user: postgres

    - name: Create extension pg_stat_statements
      postgresql_query:
        db: postgres
        query: CREATE EXTENSION pg_stat_statements;

  when: repl_mode is defined and repl_mode == 'master' or repl_mode is not defined

- block:

    - name: Copy cluster with help pg_basebackup 
      command: pg_basebackup --pgdata=/data/pgsql/ --format=p --write-recovery-conf --checkpoint=fast --slot={{ PG_REPL_SLOT_NAME }} --host={{ PG_REPL_MASTER_ADDR }} --port={{ PG_PORT }} --username={{ PG_REPL_USERNAME }}
      become: true
      become_user: postgres

    - name: Change archive command
      lineinfile:
        path: /data/pgsql/postgresql.conf
        regexp: '^archive_command = '
        line: archive_command = '/bin/pg_probackup-{{ PG_VERSION_NUMBER }} archive-push -B /backup --instance {{ ansible_hostname }} --wal-file-name=%f --compress-algorithm=zlib --compress-level=9'
      when: PG_ARCHIVE_COMMAND == "always" or PG_ARCHIVE_COMMAND == "on"

  when: repl_mode is defined and repl_mode == 'replica'

- name: Create pg_control script file
  template:
    src: templates/pg_control.j2
    dest: /var/lib/pgsql/pg_control.sh
    owner: postgres
    group: postgres
    mode: u+rwx,g+rw,o+r

- name: Create scripts dir for PostgreSQL
  file:
   path: /var/lib/pgsql/scripts/
   owner: postgres
   group: postgres
   state: directory
   mode: '0770'

- name: Copy *.sql files
  copy:
    src: "{{ item }}"
    dest: /var/lib/pgsql/scripts/
    owner: postgres
    group: postgres
    mode: u+rw,g+rw,o+r
  loop:
    - files/scripts/db_activity.sql
    - files/scripts/db_size.sql
    - files/scripts/query_stat_cpu_time.sql
    - files/scripts/query_stat_io_time.sql
    - files/scripts/query_stat_rows.sql
    - files/scripts/query_stat_time.sql
    - files/scripts/redundant_indexes.sql
    - files/scripts/rel_size.sql
    - files/scripts/show_locks.sql
    - files/scripts/temp_files_query.sql

- name: Create pg_scripts file
  template:
    src: templates/scripts_menu.j2
    dest: /var/lib/pgsql/scripts_menu.sh
    owner: postgres
    group: postgres
    mode: u+rwx,g+rwx,o+r

- name: Create environment file for DB Helper
  template:
    src: templates/environment_pg.j2
    dest: /var/lib/pgsql/{{ ansible_hostname }}.env
    owner: postgres
    group: postgres
    mode: u+rwx,g+rw,o+r

- name: Copy DB helper
  copy:
    src: files/dbhelper_pg.sh
    dest: /var/lib/pgsql/dbhelper_pg.sh
    owner: postgres
    group: postgres
    mode: u+rwx,g+rwx,o+r

- name: Adding DB Helper to bash autoload
  lineinfile:
    dest: /var/lib/pgsql/.bash_profile
    line: sh /var/lib/pgsql/dbhelper_pg.sh